{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14380\viewh13920\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs26 \cf0 Answers to exercises in the JPlex with MATLAB tutorial.\
\
\
% Exercise 3.2.1\
% We use 9 vertices, which we think of as a 3x3 grid numbered as a telephone keypad.\
% We preserve orientation while connecting the left and right sides.\
% We preserve orientation while connecting the top and bottom sides.\
tor=ExplicitStream;\
tor.add((1:9)',zeros(9,1))     % adds the vertices. zeros(9,1) is a 9 by 1 matrix of zeros.\
tor.add([1,2;2,3;3,1;4,5;5,6;6,4;7,8;8,9;9,7],zeros(9,1))     % adds the horizontal edges\
tor.add([1,4;4,7;7,1;2,5;5,8;8,2;3,6;6,9;9,3],zeros(9,1))     % adds the vertical edges\
tor.add([1,5;2,6;3,4;4,8;5,9;6,7;7,2;8,3;9,1],zeros(9,1))     % adds the diagonal edges\
tor.add([1,4,5;1,2,5;2,5,6;2,3,6;3,6,4;3,1,4;4,7,8;4,5,8;5,8,9;5,6,9;6,9,7;6,4,7;7,1,2;7,8,2;8,2,3;8,9,3;9,3,1;9,7,1],zeros(18,1))     % adds the faces\
tor.close\
intervals=Plex.Persistence.computeIntervals(tor);\
Plex.FilterInfinite(intervals)     % Should get BN\{1, 2, 1\}\
\
\
% Exercise 3.2.2\
% We use 9 vertices, which we think of as a 3x3 grid numbered as a telephone keypad.\
% We flip orientation while connecting the left and right sides.\
% We preserve orientation while connecting the top and bottom sides.\
klein=ExplicitStream;\
klein.add((1:9)',zeros(9,1))\
klein.add([1,2;2,3;3,1;4,5;5,6;6,7;7,8;8,9;9,4],zeros(9,1))\
klein.add([1,4;4,7;7,1;2,5;5,8;8,2;3,6;6,9;9,3],zeros(9,1))\
klein.add([1,5;2,6;3,7;4,8;5,9;6,4;7,2;8,3;9,1],zeros(9,1))\
klein.add([1,4,5;1,2,5;2,5,6;2,3,6;3,6,7;3,1,7;4,7,8;4,5,8;5,8,9;5,6,9;6,9,4;6,7,4;7,1,2;7,8,2;8,2,3;8,9,3;9,3,1;9,4,1],zeros(18,1))\
klein.close\
Persistence.setBaseModulus(2)\
intervals=Plex.Persistence.computeIntervals(klein);\
Plex.FilterInfinite(intervals)     % Should get BN\{1, 2, 1\}\
Persistence.setBaseModulus(3)\
intervals=Plex.Persistence.computeIntervals(klein);\
Plex.FilterInfinite(intervals)     % Should get BN\{1, 1\}\
\
\
% Exercise 3.2.3\
% We use 9 vertices, which we think of as a 3x3 grid numbered as a telephone keypad.\
% We flip orientation while connecting the left and right sides.\
% We flip orientation while connecting the top and bottom sides.\
rp2=ExplicitStream;\
rp2.add((1:9)',zeros(9,1))\
rp2.add([1,2;2,3;3,1;4,5;5,6;6,7;7,8;8,9;9,4],zeros(9,1))\
rp2.add([1,4;4,7;7,1;2,5;5,8;8,3;3,6;6,9;9,2],zeros(9,1))\
rp2.add([1,5;2,6;3,7;4,8;5,9;6,4;7,3;8,2;9,1],zeros(9,1))\
rp2.add([1,4,5;1,2,5;2,5,6;2,3,6;3,6,7;3,1,7;4,7,8;4,5,8;5,8,9;5,6,9;6,9,4;6,7,4;7,1,3;7,8,3;8,3,2;8,9,2;9,2,1;9,4,1],zeros(18,1))\
rp2.close\
Persistence.setBaseModulus(2)\
intervals=Plex.Persistence.computeIntervals(rp2);\
Plex.FilterInfinite(intervals)     % Should get BN\{1, 2, 1\}\
Persistence.setBaseModulus(3)\
intervals=Plex.Persistence.computeIntervals(rp2);\
Plex.FilterInfinite(intervals)     % Should get BN\{1, 1\}\
\
\
% Exercise 5.1.3\
% Our planar dataset is 6 evenly spaced points on the unit circle.\
% We build a Rips stream which, at the correct filtration value, is an octahedron.\
angles=2*pi/6*(1:6)';\
pointsS1=[cos(angles),sin(angles)];\
plot(pointsS1(:,1),pointsS1(:,2),'.')\
pdataS1=EuclideanArrayData(pointsS1);\
rips=Plex.RipsStream(0.001,3,2,pdataS1);\
intervals=Plex.Persistence.computeIntervals(rips);\
Plex.plot(intervals,'planar',2)\
% at filtration time t=1.9, Betti_2=1.\
\
\
% Exercise 5.1.4\
% Our planar dataset is 14 evenly spaced points on the unit circle.\
% We build a Rips stream which, at the correct filtration value, is homeomorphic\
% to the 6-sphere. It has 14 vertices because it is obtained by suspending the \
% 0-sphere six times, for a total of 2+6*2=14 vertices.\
angles=2*pi/14*(1:14)';\
pointsS1=[cos(angles),sin(angles)];\
plot(pointsS1(:,1),pointsS1(:,2),'.')\
pdataS1=EuclideanArrayData(pointsS1);\
rips=Plex.RipsStream(0.001,7,2,pdataS1);\
intervals=Plex.Persistence.computeIntervals(rips);\
Plex.plot(intervals,'planar',2)\
% at filtration time t=1.99, Betti_6=1.\
\
\
% Exercise 5.2.1\
% L is the set \{(1,0),(0,3),(-1,0)\}.\
\
\
% Exercise 5.2.2\
% Without loss of generality, assume that i<j and that landmarks l_i and l_j were\
% the i-th and j-th landmarks selected by the inductive sequential maxmin process.\
% Let L_\{j-1\} be the first j-1 landmarks chosen.\
% Proof by contradiction:\
% Suppose that d(l_i,l_j) < R.\
% By definition of R, there exists a z in Z such that d(z,L) = R\
% Note that d(l_j,L_\{j-1\}) <= d(l_j,l_i) = d(l_i,l_j) < R = d(z,L) <= d(z,L_\{j-1\}).\
% This contradicts the fact that landmark l_j was chosen at the j-th step of sequential maxmin.\
% Hence, it must be true that d(l_i,l_j) >= R.\
\
\
% Exercise 5.3.1\
% The edge between (1,0) and (0,3) has filtration time zero.\
% Points (1,2) or (0,3) witness this edge.\
% The lone 2-simplex has filtration time zero.\
\
\
% Exercise 5.4.1\
% Case nu=1:\
% The edge between (1,0) and (0,3) has filtration time 2-sqrt\{2\}.\
% Point (1,2) witnesses this edge.\
% The lone 2-simplex has filtration time sqrt\{2\}, which is when \
% the edge between (1,0) and (-1,0) appears.\
\
\
% Exercise 5.4.2\
% Case nu=0:\
% The edge between (1,0) and (0,3) has filtration time 2.\
% Point (1,2) witnesses this edge.\
% The lone 2-simplex has filtration time 2.\
% Case nu=2:\
% The edge between (1,0) and (0,3) has filtration time zero.\
% Points (1,2) or (0,3) witness this edge.\
% The lone 2-simplex has filtration time zero.\
\
\
% Exercise 5.4.3\
% This follows from the definition of the witness stream and \
% the definition of the lazy witness stream for nu=2.\
}